package ${package.ServiceImpl};

import ${package.Info}.${po};
import ${package.Vo}.${vo};
import ${package.Dto}.*;
import com.meida.backend.base.dto.*;
import ${package.Service}.${table.serviceName};
#if(${superServiceImplClass})
import ${superServiceImplClassPackage};
#end
import ${package.Dao}.${table.daoName};

import com.meida.common.constant.EOperate;
import com.meida.common.constant.ESystemStatus;
import com.meida.common.util.DateUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.UUID;

#macro( lowOrUp $name $type )
#if($type.equals("low"))
#set ($headName = $name.substring(0,1).toLowerCase())
#set ($nameFinal = $headName + $name.substring(1))
${nameFinal}#end
#if($type.equals("up"))
#set ($headName = $name.substring(0,1).toUpperCase())
#set ($nameFinal = $headName + $name.substring(1))
${nameFinal}#end#end
/**
 * ${table.baseName}业务实现类
 *
 * @author ${author}
 * @date ${date}
 */
#set ($serviceName = $table.serviceName)
#set ($headServiceName = $serviceName.substring(0,1).toLowerCase())
#set ($serviceNameFinal = $headServiceName + $serviceName.substring(1))
@Service("${serviceNameFinal}")
#if(${superServiceImplClass})
public class ${table.serviceImplName} extends ${superServiceImplClass} implements ${table.serviceName} {
#else
public class ${table.serviceImplName} implements ${table.serviceName} {
#end
	@Autowired
	#set ($daoName = $table.daoName)
    #set ($headDaoName = $daoName.substring(0,1).toLowerCase())
    #set ($daoNameFinal = $headDaoName + $daoName.substring(1))
private ${table.daoName} ${daoNameFinal};

	@Override
	public ${po} getObjectById(Serializable id) {
        return ${daoNameFinal}.getObjectById(id);
	}

	@Override
	public List<${po}> getListPage(${table.baseName}ListDto whereItemDto) {
        whereItemDto.getPagination().setPageIndex((whereItemDto.getPagination().getCurrentPage() - 1) * whereItemDto.getPagination().getPageSize());
        List<${po}> list = ${daoNameFinal}.getListPage(whereItemDto);
        long totalRecord = ${daoNameFinal}.getTotalRecord(whereItemDto);
        whereItemDto.getPagination().setTotalRecord(totalRecord);
        return list;
    }

	@Override
	public List<${po}> getListByAll() {
        return ${daoNameFinal}.getListByAll();
     }

	@Override
	public List<${po}> getListByValid() {
        return ${daoNameFinal}.getListByValid();
    }

	@Override
	public boolean submit(${table.baseName}SubmitDto submitDto) {
        Date nowTime = DateUtils.now();
	    ${po} item = submitDto.getItem();
        CurrentUserDto currentUserDto = submitDto.getCurrentUserDto();
        if (submitDto.getOperate().equals(EOperate.ADD)) {
			#foreach($field in ${table.fields})
				#if(${field.keyFlag}&&${field.isAuto}==false)
					#if(${field.propertyType.equals("String")})
                       item.set${field.capitalName}(UUID.randomUUID().toString());
					#else
						item.set${field.capitalName}(UUID.randomUUID().toString());
					#end
				#end
			#end
			item.setIsValid(ESystemStatus.Valid);
			item.setCreateDate(nowTime);
			item.setCreateUserId(currentUserDto.getUserId());
			item.setCreateUser(currentUserDto.getRealName());
			item.setUpdateDate(nowTime);
			item.setUpdateUserId(currentUserDto.getUserId());
			item.setUpdateUser(currentUserDto.getRealName());
        	return ${daoNameFinal}.save(item) > 0;
        } else {
			item.setUpdateDate(nowTime);
			item.setUpdateUserId(currentUserDto.getUserId());
			item.setUpdateUser(currentUserDto.getRealName());
			return ${daoNameFinal}.update(item) > 0;
        }
    }

	@Override
	public boolean delete(DeleteDto deleteDto) {
        boolean isFlag = ${daoNameFinal}.logicDelete(deleteDto) > 0;
        return isFlag;
     }

	@Override
	public boolean enable(EnableDto enableDto) {
        boolean isFlag = ${daoNameFinal}.enable(enableDto) > 0;
        return isFlag;
    }

	@Override
	public boolean disable(DisableDto disableDto) {
        boolean isFlag = ${daoNameFinal}.disable(disableDto) > 0;
        return isFlag;
     }

	@Override
	public boolean physicalDelete(PhysicalDeleteDto physicalDeleteDto) {
    	boolean isFlag = ${daoNameFinal}.physicalDelete(physicalDeleteDto.getIds()) > 0;
    	return isFlag;
    }
}
